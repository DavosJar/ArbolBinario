/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import arbolbinario.BinaryTree;
import arbolbinario.Node;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;



/**
 *
 * @author Alexis
 */
public class ArbolFrame extends javax.swing.JFrame {

    private BinaryTree arbol;
    // Para almacenar el Ã¡rbol binario creado

    public ArbolFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodoPanel = new GUI.PanelRound();
        jLabel1 = new javax.swing.JLabel();
        arbolPanel = new javax.swing.JPanel();
        btnPanel = new javax.swing.JPanel();
        initBtn = new javax.swing.JButton();
        addBtn1 = new javax.swing.JButton();
        preOrderBtn = new javax.swing.JButton();
        postOrderBtn = new javax.swing.JButton();
        InOrderBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        delNodo = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        nodoPanel.setBackground(new java.awt.Color(0, 0, 0));
        nodoPanel.setMaximumSize(new java.awt.Dimension(125, 125));
        nodoPanel.setMinimumSize(new java.awt.Dimension(75, 75));
        nodoPanel.setPreferredSize(new java.awt.Dimension(125, 125));
        nodoPanel.setRoundBottomLeft(1000);
        nodoPanel.setRoundBottomRight(1000);
        nodoPanel.setRoundTopLeft(1000);
        nodoPanel.setRoundTopRight(1000);
        nodoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("0");
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nodoPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, -1, 40));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 204, 255));
        setMinimumSize(new java.awt.Dimension(400, 390));
        setName("VentanaRaiz"); // NOI18N
        setUndecorated(true);

        arbolPanel.setBackground(new java.awt.Color(202, 248, 225));
        arbolPanel.setAutoscrolls(true);

        javax.swing.GroupLayout arbolPanelLayout = new javax.swing.GroupLayout(arbolPanel);
        arbolPanel.setLayout(arbolPanelLayout);
        arbolPanelLayout.setHorizontalGroup(
            arbolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1104, Short.MAX_VALUE)
        );
        arbolPanelLayout.setVerticalGroup(
            arbolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        btnPanel.setBackground(new java.awt.Color(196, 250, 229));
        btnPanel.setToolTipText("");
        btnPanel.setPreferredSize(new java.awt.Dimension(170, 498));

        initBtn.setText("Nuevo Arbol");
        initBtn.setToolTipText("");
        initBtn.setMaximumSize(new java.awt.Dimension(100, 60));
        initBtn.setMinimumSize(new java.awt.Dimension(100, 60));
        initBtn.setPreferredSize(new java.awt.Dimension(150, 60));
        initBtn.setRolloverEnabled(false);
        initBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initBtnActionPerformed(evt);
            }
        });

        addBtn1.setText("Agregar Nodo");
        addBtn1.setToolTipText("");
        addBtn1.setMaximumSize(new java.awt.Dimension(100, 60));
        addBtn1.setMinimumSize(new java.awt.Dimension(100, 60));
        addBtn1.setPreferredSize(new java.awt.Dimension(150, 60));
        addBtn1.setRolloverEnabled(false);
        addBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtn1ActionPerformed(evt);
            }
        });

        preOrderBtn.setText("Recorrirdo PreOrden");
        preOrderBtn.setMaximumSize(new java.awt.Dimension(100, 60));
        preOrderBtn.setMinimumSize(new java.awt.Dimension(100, 60));
        preOrderBtn.setPreferredSize(new java.awt.Dimension(150, 60));
        preOrderBtn.setRolloverEnabled(false);
        preOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preOrderBtnActionPerformed(evt);
            }
        });

        postOrderBtn.setText("Recorrirdo PostOrden");
        postOrderBtn.setMaximumSize(new java.awt.Dimension(100, 60));
        postOrderBtn.setMinimumSize(new java.awt.Dimension(100, 60));
        postOrderBtn.setPreferredSize(new java.awt.Dimension(150, 60));
        postOrderBtn.setRolloverEnabled(false);
        postOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postOrderBtnActionPerformed(evt);
            }
        });

        InOrderBtn.setText("Recorrirdo InOrden");
        InOrderBtn.setMaximumSize(new java.awt.Dimension(100, 60));
        InOrderBtn.setMinimumSize(new java.awt.Dimension(100, 60));
        InOrderBtn.setPreferredSize(new java.awt.Dimension(150, 60));
        InOrderBtn.setRolloverEnabled(false);
        InOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InOrderBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Restablecer");
        resetBtn.setToolTipText("");
        resetBtn.setMaximumSize(new java.awt.Dimension(100, 60));
        resetBtn.setMinimumSize(new java.awt.Dimension(100, 60));
        resetBtn.setPreferredSize(new java.awt.Dimension(150, 60));
        resetBtn.setRolloverEnabled(false);
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        delNodo.setText("Eliminar Nodo");
        delNodo.setMaximumSize(new java.awt.Dimension(100, 60));
        delNodo.setMinimumSize(new java.awt.Dimension(100, 60));
        delNodo.setPreferredSize(new java.awt.Dimension(150, 60));
        delNodo.setRolloverEnabled(false);
        delNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delNodoActionPerformed(evt);
            }
        });

        clearBtn.setText("Limpiar");
        clearBtn.setMaximumSize(new java.awt.Dimension(100, 60));
        clearBtn.setMinimumSize(new java.awt.Dimension(100, 60));
        clearBtn.setPreferredSize(new java.awt.Dimension(150, 60));
        clearBtn.setRolloverEnabled(false);
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("Cerrar");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnPanelLayout = new javax.swing.GroupLayout(btnPanel);
        btnPanel.setLayout(btnPanelLayout);
        btnPanelLayout.setHorizontalGroup(
            btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(preOrderBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(postOrderBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(InOrderBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(initBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delNodo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        btnPanelLayout.setVerticalGroup(
            btnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.setBackground(new java.awt.Color(255, 255, 204));
        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arbolPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(arbolPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void preOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preOrderBtnActionPerformed
        new SwingWorker<Void, Node>() {
        StringBuilder traversalResult = new StringBuilder();

        @Override
        protected Void doInBackground() throws Exception {
            arbol.traversePreOrder(node -> {
                publish(node); // Publicar el nodo actual para el procesamiento en process()
            });
            return null;
        }

        @Override
        protected void process(List<Node> nodes) {
            for (Node node : nodes) {
                // Buscar el JLabel correspondiente al valor del nodo
                Component[] components = arbolPanel.getComponents();
                for (Component component : components) {
                    if (component instanceof JLabel label) {
                        if (label.getText().equals(String.valueOf(node.getValue()))) {
                            // Cambiar el color del fondo a rojo si no estÃ¡ rojo ya
                            if (!label.getBackground().equals(Color.RED)) {
                                label.setBackground(Color.RED);
                                label.setOpaque(true); // Permitir que el fondo sea visible
                                arbolPanel.revalidate(); // Revalidar el panel para actualizar la interfaz
                                arbolPanel.repaint(); // Repintar el panel para asegurar que los cambios sean visibles
                            }
                        }
                    }
                }
                // Construir el recorrido en el StringBuilder
                traversalResult.append(node.getValue()).append(" ");
            }
            // Actualizar el JLabel con el recorrido actualizado
            jLabel2.setText(traversalResult.toString().trim());
        }
    }.execute();
    }//GEN-LAST:event_preOrderBtnActionPerformed

    private void initBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initBtnActionPerformed
         if (arbolPanel.getComponentCount() > 0) {
            int opcion = JOptionPane.showConfirmDialog(this, "Ya existe un Ã¡rbol. Â¿EstÃ¡ seguro de reemplazarlo?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.NO_OPTION) {
                return;
            }
            arbolPanel.removeAll(); // Eliminar el Ã¡rbol existente del panel
            arbol = null; // Reiniciar la referencia al Ã¡rbol
        }

        String input;
        int valor = 0;

        do {
            input = JOptionPane.showInputDialog(this, "Ingrese un valor entero:");

            if (input != null) {
                try {
                    valor = Integer.parseInt(input);

                    // Crear BinaryTree con el valor ingresado como raÃ­z
                    arbol = new BinaryTree(valor);

                    // Crear JLabel con el valor ingresado
                    JLabel nuevoLabel = new JLabel(String.valueOf(valor));
                    nuevoLabel.setBackground(new Color(0, 0, 128)); // Fondo azul oscuro
                    nuevoLabel.setForeground(Color.WHITE); // Texto blanco
                    nuevoLabel.setHorizontalAlignment(SwingConstants.CENTER); // Centrar horizontalmente
                    nuevoLabel.setVerticalAlignment(SwingConstants.CENTER); // Centrar verticalmente
                    nuevoLabel.setFont(new Font("Arial", Font.PLAIN, 25)); // TamaÃ±o de letra 15
                    nuevoLabel.setOpaque(true); // Permitir que el fondo sea visible

                    // Ajustar el tamaÃ±o del JLabel a 50x50
                    int size = 50;
                    nuevoLabel.setBounds((arbolPanel.getWidth() - size) / 2, 50, size, size);

                    // Agregar el JLabel al arbolPanel
                    arbolPanel.add(nuevoLabel);
                    arbolPanel.revalidate(); // Revalidar el panel para actualizar la interfaz
                    arbolPanel.repaint(); // Repintar el panel para asegurar que los cambios sean visibles

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Por favor, ingrese un nÃºmero entero vÃ¡lido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } while (input != null && valor == 0);
    }//GEN-LAST:event_initBtnActionPerformed

    private void postOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postOrderBtnActionPerformed
        new SwingWorker<Void, Node>() {
            StringBuilder traversalResult = new StringBuilder();

            @Override
            protected Void doInBackground() throws Exception {
                arbol.traversePostOrder(node -> {
                    publish(node); // Publicar el nodo actual para el procesamiento en process()
                });
                return null;
            }

            @Override
            protected void process(List<Node> nodes) {
                for (Node node : nodes) {
                    // Buscar el JLabel correspondiente al valor del nodo
                    Component[] components = arbolPanel.getComponents();
                    for (Component component : components) {
                        if (component instanceof JLabel label) {
                            if (label.getText().equals(String.valueOf(node.getValue()))) {
                                // Cambiar el color del fondo a rojo si no estÃ¡ rojo ya
                                if (!label.getBackground().equals(Color.RED)) {
                                    label.setBackground(Color.RED);
                                    label.setOpaque(true); // Permitir que el fondo sea visible
                                    arbolPanel.revalidate(); // Revalidar el panel para actualizar la interfaz
                                    arbolPanel.repaint(); // Repintar el panel para asegurar que los cambios sean visibles
                                }
                            }
                        }
                    }
                    // Construir el recorrido en el StringBuilder
                    traversalResult.append(node.getValue()).append(" ");
                }
                // Actualizar el JLabel con el recorrido actualizado
                jLabel2.setText(traversalResult.toString().trim());
            }
        }.execute();
    }//GEN-LAST:event_postOrderBtnActionPerformed
    
    private void InOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InOrderBtnActionPerformed
        new SwingWorker<Void, Node>() {
        StringBuilder traversalResult = new StringBuilder();

        @Override
        protected Void doInBackground() throws Exception {
            arbol.traverseInOrder(node -> {
                publish(node); // Publicar el nodo actual para el procesamiento en process()
            });
            return null;
        }

        @Override
        protected void process(List<Node> nodes) {
            for (Node node : nodes) {
                // Buscar el JLabel correspondiente al valor del nodo
                Component[] components = arbolPanel.getComponents();
                for (Component component : components) {
                    if (component instanceof JLabel label) {
                        if (label.getText().equals(String.valueOf(node.getValue()))) {
                            // Cambiar el color del fondo a rojo si no estÃ¡ rojo ya
                            if (!label.getBackground().equals(Color.RED)) {
                                label.setBackground(Color.RED);
                                label.setOpaque(true); // Permitir que el fondo sea visible
                                arbolPanel.revalidate(); // Revalidar el panel para actualizar la interfaz
                                arbolPanel.repaint(); // Repintar el panel para asegurar que los cambios sean visibles
                            }
                        }
                    }
                }
                // Construir el recorrido en el StringBuilder
                traversalResult.append(node.getValue()).append(" ");
            }
            // Actualizar el JLabel con el recorrido actualizado
            jLabel2.setText(traversalResult.toString().trim());
        }
    }.execute();
        
    }//GEN-LAST:event_InOrderBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        Component[] components = arbolPanel.getComponents();
        for (Component component : components) {
            if (component instanceof JLabel label) {
                label.setBackground(Color.DARK_GRAY);
                label.setForeground(Color.WHITE);
                label.setOpaque(true);
            }
        }
        arbolPanel.revalidate();  // Revalida el panel para reflejar los cambios
        arbolPanel.repaint();
    }//GEN-LAST:event_resetBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed

    // Eliminar todos los componentes del arbolPanel
    arbolPanel.removeAll();
    
    // Revalidar y repintar el panel para reflejar los cambios
    arbolPanel.revalidate();
    arbolPanel.repaint();
    
    // Reiniciar cualquier estado asociado al Ã¡rbol binario o arbolPanel
    reiniciarEstadoArbolPanel();
    }
    private void reiniciarEstadoArbolPanel() {

    

    arbol = null; 
    
    
    // Imprimir mensaje o realizar cualquier otra acciÃ³n para confirmar reinicio
    System.out.println("Estado del Ã¡rbol y arbolPanel reiniciado.");   
    }//GEN-LAST:event_clearBtnActionPerformed

    private void addBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtn1ActionPerformed
    if (arbol == null) {
        JOptionPane.showMessageDialog(this, "No se puede agregar un nodo porque no hay un Ã¡rbol creado.", "Ãrbol no existe", JOptionPane.WARNING_MESSAGE);
        return;
    }

    boolean valorValido = false;
    while (!valorValido) {
        String input = JOptionPane.showInputDialog(this, "Ingrese un valor entero:");

        if (input == null) {
            return; // El usuario ha cancelado el diÃ¡logo, salir del mÃ©todo
        }

        try {
            int valor = Integer.parseInt(input);

            // Verificar si el valor ya existe en el Ã¡rbol
            if (arbol.contains(valor)) {
                JOptionPane.showMessageDialog(this, "El valor ya existe en el Ã¡rbol.", "Valor duplicado", JOptionPane.WARNING_MESSAGE);
            } else {
                // Insertar el nodo en el Ã¡rbol
                arbol.addNode(valor);
                valorValido = true; // Marcar como vÃ¡lido para salir del bucle

                // Obtener el nodo padre del valor insertado
                Node padre = arbol.getPadre(valor);
                if (padre != null) {
                    // Obtener la posiciÃ³n del JLabel del nodo padre
                    Component[] components = arbolPanel.getComponents();
                    int posXPadre = -1, posYPadre = -1;
                    for (Component component : components) {
                        if (component instanceof JLabel label) {
                            if (label.getText().equals(String.valueOf(padre.getValue()))) {
                                // Obtener la posiciÃ³n del nodo padre
                                posXPadre = label.getX();
                                posYPadre = label.getY();
                                break;
                            }
                        }
                    }

                    if (posXPadre != -1 && posYPadre != -1) {
                        // Calcular la posiciÃ³n del nuevo nodo hijo
                        int size = 50; // TamaÃ±o del nodo
                        int baseSpaceX = 400; // Espacio horizontal base entre nodos
                        int baseSpaceY = 150; // Espacio vertical base entre niveles del Ã¡rbol

                        // Calcular nivel del nodo en el Ã¡rbol
                        int nivel = 1;
                        Node current = padre;
                        while (current != null) {
                            nivel++;
                            current = arbol.getPadre(current.getValue());
                        }

                        // Ajustar espacio horizontal y vertical en funciÃ³n del nivel
                        int spaceX = baseSpaceX / nivel;
                        int spaceY = baseSpaceY - (nivel * 10); // Reducir en menor medida la distancia vertical

                        int posXHijo = posXPadre + (valor < padre.getValue() ? -spaceX : spaceX);
                        int posYHijo = posYPadre + spaceY;

                        // Asegurar que no se superponga con nodos existentes
                        for (Component component : components) {
                            if (component instanceof JLabel label) {
                                if (!label.getText().equals(String.valueOf(padre.getValue()))) {
                                    int labelX = label.getX();
                                    int labelY = label.getY();
                                    if (Math.abs(labelX - posXHijo) < size && Math.abs(labelY - posYHijo) < size) {
                                        // Si hay superposiciÃ³n, ajustar la posiciÃ³n
                                        posXHijo += size + spaceX;
                                        posYHijo += size + spaceY;
                                    }
                                }
                            }
                        }

                        // Crear JLabel con el valor ingresado
                        JLabel nuevoLabel = new JLabel(String.valueOf(valor));
                        nuevoLabel.setBackground(Color.DARK_GRAY); // Fondo negro
                        nuevoLabel.setForeground(Color.WHITE); // Texto blanco
                        nuevoLabel.setHorizontalAlignment(SwingConstants.CENTER); // Centrar horizontalmente
                        nuevoLabel.setVerticalAlignment(SwingConstants.CENTER); // Centrar verticalmente
                        nuevoLabel.setFont(new Font("Arial", Font.PLAIN, 25)); // TamaÃ±o de letra 25
                        nuevoLabel.setOpaque(true); // Permitir que el fondo sea visible

                        // Ajustar el tamaÃ±o del JLabel a 50x50
                        nuevoLabel.setBounds(posXHijo, posYHijo, size, size);

                        // Agregar el JLabel al arbolPanel
                        arbolPanel.add(nuevoLabel);
                        arbolPanel.revalidate(); // Revalidar el panel para actualizar la interfaz
                        arbolPanel.repaint(); // Repintar el panel para asegurar que los cambios sean visibles

                        // Conectar los nodos
                        JLabel padreLabel = null;
                        for (Component component : components) {
                            if (component instanceof JLabel label) {
                                if (label.getText().equals(String.valueOf(padre.getValue()))) {
                                    padreLabel = label;
                                    break;
                                }
                            }
                        }

                        // Crear y agregar la lÃ­nea de conexiÃ³n entre el nodo padre y el nodo hijo
                        if (padreLabel != null) {
                            int x1 = padreLabel.getX() + padreLabel.getWidth() / 2;
                            int y1 = padreLabel.getY() + padreLabel.getHeight();
                            int x2 = nuevoLabel.getX() + nuevoLabel.getWidth() / 2;
                            int y2 = nuevoLabel.getY();

                            Line line = new Line(x1, y1, x2, y2);
                            line.setBounds(0, 0, arbolPanel.getWidth(), arbolPanel.getHeight());
                            arbolPanel.add(line);
                            arbolPanel.setComponentZOrder(line, 0); // Poner la lÃ­nea en el fondo
                            arbolPanel.revalidate();
                            arbolPanel.repaint();
                        }

                        // Imprimir informaciÃ³n del Ã¡rbol por consola
                        System.out.println("Ãrbol actualizado:\n" + arbol);
                    }
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un nÃºmero entero vÃ¡lido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_addBtn1ActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
         System.exit(0); 
    }//GEN-LAST:event_closeBtnActionPerformed

    private void delNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delNodoActionPerformed
        if (arbol == null) {
        JOptionPane.showMessageDialog(this, "No se puede eliminar un nodo porque no hay un Ã¡rbol creado.", "Ãrbol no existe", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String input = JOptionPane.showInputDialog(this, "Ingrese el valor del nodo a eliminar:");

    if (input == null) {
        return; // El usuario ha cancelado el diÃ¡logo, salir del mÃ©todo
    }

    try {
        int valor = Integer.parseInt(input);

        // Verificar si el valor existe en el Ã¡rbol
        if (!arbol.contains(valor)) {
            JOptionPane.showMessageDialog(this, "El valor no existe en el Ã¡rbol.", "Valor no encontrado", JOptionPane.WARNING_MESSAGE);
        } else {
            // Eliminar el nodo del Ã¡rbol
            arbol.deleteNode(valor);
            
            // Actualizar la interfaz grÃ¡fica
            arbolPanel.removeAll(); // Eliminar todos los componentes del panel
            
            // Volver a agregar los nodos actuales del Ã¡rbol al panel
            actualizarArbolPanel(arbol.getRoot(), arbolPanel.getWidth() / 2, 30, arbolPanel.getWidth() / 4, arbolPanel);

            arbolPanel.revalidate(); // Revalidar el panel para actualizar la interfaz
            arbolPanel.repaint(); // Repintar el panel para asegurar que los cambios sean visibles

            // Imprimir informaciÃ³n del Ã¡rbol por consola
            System.out.println("Ãrbol actualizado:\n" + arbol);
            }
        } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un nÃºmero entero vÃ¡lido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_delNodoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArbolFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArbolFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArbolFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArbolFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArbolFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton InOrderBtn;
    private javax.swing.JButton addBtn1;
    private javax.swing.JPanel arbolPanel;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton delNodo;
    private javax.swing.JButton initBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private GUI.PanelRound nodoPanel;
    private javax.swing.JButton postOrderBtn;
    private javax.swing.JButton preOrderBtn;
    private javax.swing.JButton resetBtn;
    // End of variables declaration//GEN-END:variables
private void actualizarArbolPanel(Node nodo, int x, int y, int horizontalSpacing, JPanel arbolPanel) {
    if (nodo != null) {
        JLabel nodoLabel = new JLabel(String.valueOf(nodo.getValue()));
        nodoLabel.setBackground(Color.DARK_GRAY); // Fondo negro
        nodoLabel.setForeground(Color.WHITE); // Texto blanco
        nodoLabel.setHorizontalAlignment(SwingConstants.CENTER); // Centrar horizontalmente
        nodoLabel.setVerticalAlignment(SwingConstants.CENTER); // Centrar verticalmente
        nodoLabel.setFont(new Font("Arial", Font.PLAIN, 25)); // TamaÃ±o de letra 25
        nodoLabel.setOpaque(true); // Permitir que el fondo sea visible

        // Ajustar el tamaÃ±o del JLabel a 50x50
        nodoLabel.setBounds(x, y, 50, 50);

        arbolPanel.add(nodoLabel);

        // Conectar con el nodo izquierdo
        if (nodo.getLeftChild() != null) {
            int childX = x - horizontalSpacing;
            int childY = y + 100; // Distancia vertical entre niveles
            actualizarArbolPanel(nodo.getLeftChild(), childX, childY, horizontalSpacing / 2, arbolPanel);
            conectarNodos(nodoLabel, new JLabel(String.valueOf(nodo.getLeftChild().getValue())));
        }

        // Conectar con el nodo derecho
        if (nodo.getRightChild() != null) {
            int childX = x + horizontalSpacing;
            int childY = y + 100; // Distancia vertical entre niveles
            actualizarArbolPanel(nodo.getRightChild(), childX, childY, horizontalSpacing / 2, arbolPanel);
            conectarNodos(nodoLabel, new JLabel(String.valueOf(nodo.getRightChild().getValue())));
        }
    }
}
private void conectarNodos(JLabel parent, JLabel child) {
    Line line = new Line(parent.getX() + parent.getWidth() / 2, parent.getY() + parent.getHeight() / 2, child.getX() + child.getWidth() / 2, child.getY() + child.getHeight() / 2);
    arbolPanel.add(line);
}
}